================================================================================
Исходный код
================================================================================

--------------------------------------------------------------------------------
Имена файлов строчными латинскими символами без пробелов и знаков
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
Кодировка исходных файлов UTF-8
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
Запрещается использовать спецсимволы в исходных текстах
--------------------------------------------------------------------------------
.. attention:: Особое внимание обращать на вставку в исходный код символа табуляции. 

.. tip:: При необходимости произведите настройку вашей IDE на автоматическую замену табуляций соответствующим числом пробелов.

Количество пробелов, на которое заменяется табулятор при показе, является настройкой текстового редактора и может быть разным. Смешение в коде отступов с помощью нескольких пробелов и табуляций приводит к непредсказуемым визуальным нарушениям структуры отступов при просмотре.

Например, при показе табуляции в 2 пробела 

.. literalinclude:: tabexample.cpp
   :language: c++
   :tab-width: 2
   :linenos:

При показе табуляции в 3 пробела 

.. literalinclude:: tabexample.cpp
   :language: c++
   :tab-width: 3
   :linenos:

При показе табуляции в 4 пробела 

.. literalinclude:: tabexample.cpp
   :language: c++
   :tab-width: 4
   :linenos:

При показе табуляции в 8 пробелов 

.. literalinclude:: tabexample.cpp
   :language: c++
   :tab-width: 8
   :linenos:


--------------------------------------------------------------------------------
Избегайте длинных файлов.
--------------------------------------------------------------------------------
Длинными считаются файлы более 1000 строк.


--------------------------------------------------------------------------------
Избегайте длинных функций.
--------------------------------------------------------------------------------
Длинными считаются функции более 180 строк.


--------------------------------------------------------------------------------
Длина строки исходного файла ограничена 80 символами. Используйте разрывы строк для более длинных строк.
--------------------------------------------------------------------------------
Основание: реализация ограничения на длину строки происходит либо отбрасывание, либо переносом конца, при этом исходный текст становится трудным для восприятия. Отсутствие ограничения на длину строки у других разработчиков гарантировать невозможно. 80 является общепризнанным соглашением о количестве символов в строке редакторов, эмуляторов терминалов (консолей), принтеров и отладчиков.


================================================================================
Отступы, выравнивания и скобки
================================================================================

.. tip:: Настройте ваш редактор на автоматическое поддержание правильного форматирования.

--------------------------------------------------------------------------------
Основной отступ составляет 4 пробела
--------------------------------------------------------------------------------

.. table::

   =============  ==============================================================
   ПРАВИЛЬНО      .. code-block:: c++

                     for (i = 0; i < nElements; i += 1) {
                         a[i] = 0;
                     }
   -------------  --------------------------------------------------------------
   НЕПРАВИЛЬНО    .. code-block:: c++

                     for (i = 0; i < nElements; i += 1) {
                       a[i] = 0;
                     }
   =============  ==============================================================

--------------------------------------------------------------------------------
Тело блока размещайте с основным отступом относительно границ блока.
--------------------------------------------------------------------------------

.. todo:: примеры

.. table::

   =============  ==============================================================
   ПРАВИЛЬНО      .. code-block:: c++

                     "statement" {
                         "statements";
                     }
   -------------  --------------------------------------------------------------
   НЕПРАВИЛЬНО    .. code-block:: c++

                     "statement" {
                     "statements";
                     }
   =============  ==============================================================

.. table::

   =============  ==============================================================
   ПРАВИЛЬНО      .. code-block:: c++

                     for ("init"; "cond"; "update") {
                     }
   -------------  --------------------------------------------------------------
   НЕПРАВИЛЬНО    .. code-block:: c++

                     for ("init"; "condition"; "update") {}
   =============  ==============================================================

Исключение составляют namespace, для которых не делается отступ внутри блока.

.. table::

   =============  ==============================================================
   ПРАВИЛЬНО      .. code-block:: c++

                     // 
                     
                     namespace {
                     class X {
                         // ...
                     };

                     namespace nestedNameSpace {
                     class Y{
                         // ...
                     };
                     }
                     }
   -------------  --------------------------------------------------------------
   НЕПРАВИЛЬНО    .. code-block:: c++

                     namespace {
                         class X {
                             // ...
                         };

                         namespace nestedNameSpace {
                             class Y{
                                 // ...
                             };
                         }
                     }
   =============  ==============================================================


--------------------------------------------------------------------------------
Расстановка скобок
--------------------------------------------------------------------------------
Тела циклов, ветвлений и т.д. всегда делайте блоком с каноническим оформлением

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Логические блоки (if, else) оформляются в соответствии с общим принципом оформления блоков следующим образом. Однострочные и пустые блоки тоже обрамляйте фигурными скобками.


.. hint:: ШАБЛОН оформления инструкции выбора if

   .. code-block:: c++

      if ("condition") {
          "statements";
      }
      
   Условие с альтернативой

   .. code-block:: c++

      if ("condition") {
          "statements";
      } else {
          "statements";
      }

   .. code-block:: c++

      if ("condition") {
          "statements";
      }
      else if ("condition") {
          "statements";
      } else {
           "statements";
      }

.. table::

   =============  ==============================================================
   ПРАВИЛЬНО      .. code-block:: c++

                     if (shouldGo) {
                         startProcess();
                     }

   ПРАВИЛЬНО      .. code-block:: c++

                     if (a < bottomLevel) {
                         selectBest(prop, pData);
                     } if else (a < topLevel) {
                         selectWorst(prop, pData);
                     }

   -------------  --------------------------------------------------------------
   НЕПРАВИЛЬНО    .. code-block:: c++

                     if (shouldGo)
                         startProcess();

   НЕПРАВИЛЬНО    .. code-block:: c++

                     if ("condition")
                         selectBest(prop, pData);
                     else
                         selectWorst(prop, pData);

   НЕПРАВИЛЬНО    .. code-block:: c++

                     if ("condition") selectBest(prop, pData);
                     else selectWorst(prop, pData);

   НЕПРАВИЛЬНО    .. code-block:: c++

                     while (!done) doSomething();

   НЕПРАВИЛЬНО    .. code-block:: c++

                     while (!done)
                         doSomething();
   =============  ==============================================================

--------------------------------------------------------------------------------
Оформление инструкции цикла for.
--------------------------------------------------------------------------------
Цикл for оформляется в соответствии с общим принципом оформления блоков следующим образом.

.. hint:: ШАБЛОН

   .. code-block:: c++

      for ("initialization"; "condition"; "update") {
          "statements";
      }

--------------------------------------------------------------------------------
Оформление инструкции цикла while
--------------------------------------------------------------------------------
Цикл while оформлятеся в соответствии с общим принципом оформления блоков следующим образом.

.. hint:: ШАБЛОН

   .. code-block:: c++

      while ("condition") {
          "statements";
      }


--------------------------------------------------------------------------------
Цикл do - while оформлятеся в соответствии с общим принципом оформления блоков следующим образом.
--------------------------------------------------------------------------------

.. hint:: ШАБЛОН

   .. code-block:: c++

      do {
          "statements";
      } while ("condition");



Оформляйте всегда в блок пустые и однострочные тела циклов и т.д.

.. table::

   =============  ==============================================================
   ПРАВИЛЬНО      .. code-block:: c++

                     if ("condition") {
                         selectBest(prop, pData);
                     }

   ПРАВИЛЬНО      .. code-block:: c++

                     if ("condition") {
                         selectBest(prop, pData);
                     } else {
                         selectWorst(prop, pData);
                     }

   ПРАВИЛЬНО      .. code-block:: c++

                     while (!done) {
                         doSomething();
                     }
   -------------  --------------------------------------------------------------
   НЕПРАВИЛЬНО    .. code-block:: c++

                     if ("condition")
                         selectBest(prop, pData);

   НЕПРАВИЛЬНО    .. code-block:: c++

                     if ("condition")
                         selectBest(prop, pData);
                     else
                         selectWorst(prop, pData);

   НЕПРАВИЛЬНО    .. code-block:: c++

                     if ("condition") selectBest(prop, pData);
                     else selectWorst(prop, pData);

   НЕПРАВИЛЬНО    .. code-block:: c++

                     while (!done) doSomething();

   НЕПРАВИЛЬНО    .. code-block:: c++

                     while (!done)
                         doSomething();
   =============  ==============================================================

--------------------------------------------------------------------------------
Пустой цикл оформляется следующим образом
--------------------------------------------------------------------------------

.. table::

   =============  ==============================================================
   ПРАВИЛЬНО      .. code-block:: c++

                     for ("init"; "cond"; "update") {
                     }

   ПРАВИЛЬНО      .. code-block:: c++

                     while (f(x)) {
                     }
   -------------  --------------------------------------------------------------
   НЕПРАВИЛЬНО    .. code-block:: c++

                     for ("init"; "cond"; "update");

                     for ("init"; "condition"; "update") {}

                     while (f(x)) {}
   =============  ==============================================================


--------------------------------------------------------------------------------
Инструкция выбора switch оформляется следующим образом.
--------------------------------------------------------------------------------

.. hint:: ШАБЛОН оформления switch

   .. code-block:: c++

      switch ("condition") {
      case DEF:
          "statements";
          break;
      case XYZ:
          "statements";
          break;
      default:
          "statements";
      }
      

--------------------------------------------------------------------------------
Разделяйте логически связанные части исходного кода одной пустой строкой.
--------------------------------------------------------------------------------

.. table::

   =============  ==============================================================
   ПРАВИЛЬНО      .. code-block:: c++

                     double cosAngle = Math.cos(angle);
                     double sinAngle = Math.sin(angle);

                     Matrix4x4 matrix = new Matrix4x4();
                     matrix.setElement(1, 1, cosAngle);
                     matrix.setElement(1, 2, sinAngle);
                     matrix.setElement(2, 1, -sinAngle);
                     matrix.setElement(2, 2, cosAngle);

                     multiply(matrix);
   -------------  --------------------------------------------------------------
   НЕПРАВИЛЬНО    .. code-block:: c++

                     double cosAngle = Math.cos(angle);
                     Matrix4x4 matrix = new Matrix4x4();
                     matrix.setElement(1, 1, cosAngle);
                     double sinAngle = Math.sin(angle);
                     matrix.setElement(1, 2, sinAngle);
                     matrix.setElement(2, 1, -sinAngle);
                     matrix.setElement(2, 2, cosAngle);
                     multiply(matrix);
   =============  ==============================================================

--------------------------------------------------------------------------------
Разделяйте определения функции тремя пустыми строками.
--------------------------------------------------------------------------------

.. table::

   =============  ==============================================================
   ПРАВИЛЬНО      .. code-block:: c++

                     void
                     funcA()
                     {
                         // ...
                     }



                     void
                     funcB()
                     {
                         // ...
                     }
   -------------  --------------------------------------------------------------
   НЕПРАВИЛЬНО    .. code-block:: c++

                     void
                     funcA()
                     {
                         // ...
                     }

                     void
                     funcB()
                     {
                         // ...
                     }
                     void
                     СMainWindow::funcA()
                     {
                         // ...
                     }
                     void
                     СMainWindow::funcB()
                     {
                         // ...
                     }
   =============  ==============================================================

--------------------------------------------------------------------------------
Используйте отличные от рекомендуемого форматирование только в том случае, если его использование существенно улучшает читаемость кода.
--------------------------------------------------------------------------------

:ПРИМЕР:

   .. code-block:: c++

      switch (typePhase)
      {
          case PHASE_PRE    : start(phase, "Pre");    break;
          case PHASE_COMMON : start(phase, "Common"); break;
          case PHASE_POST   : start(phase, "Post");   break;
      }

--------------------------------------------------------------------------------
В определении функции размещайте тип возвращаемого значения на отдельной строке.
--------------------------------------------------------------------------------

.. table::

   =============  ==============================================================
   ПРАВИЛЬНО      .. code-block:: c++

                     int
                     findMedian("arguments")



                     void
                     MyClass::myMethod("arguments")
                     {
                         "statements";
                     }
   -------------  --------------------------------------------------------------
   НЕПРАВИЛЬНО    .. code-block:: c++

                     int findMedian("arguments")

                     void MyClass::myMethod("arguments")
                     {
                         "statements";
                     }
   =============  ==============================================================



================================================================================
Пробелы
================================================================================

--------------------------------------------------------------------------------
Ставьте пробел после ключевых слов языка.
--------------------------------------------------------------------------------
.. table::

   =============  ==============================================================
   ПРАВИЛЬНО      .. code-block:: c++

                     while (bGo)
                     
   -------------  --------------------------------------------------------------
   НЕПРАВИЛЬНО    .. code-block:: c++

                     while(bGo)
                     
   =============  ==============================================================

- до и после бинарного оператора (кроме запятой)
- до и после частей тернарного оператора

--------------------------------------------------------------------------------
Ставьте пробел после запятой, и не ставьте перед.
--------------------------------------------------------------------------------

.. table::

   =============  ==============================================================
   ПРАВИЛЬНО      .. code-block:: c++

                     for (int i(0); i < nAction; i += 1) {
   -------------  --------------------------------------------------------------
   НЕПРАВИЛЬНО    .. code-block:: c++

                     for (int i(0) ; i < nAction ; i += 1) {
   =============  ==============================================================


--------------------------------------------------------------------------------
Ствьте пробел между частями инструкции цикла for
--------------------------------------------------------------------------------

- после точки с запятой в инструкции цикла for

.. table::

   =============  ==============================================================
   ПРАВИЛЬНО      .. code-block:: c++

                     for (int i(0); i < nAction; i += 1) {
   -------------  --------------------------------------------------------------
   НЕПРАВИЛЬНО    .. code-block:: c++

                     for (int i(0) ; i < nAction ; i += 1) {

                  .. code-block:: c++

                     for (int i(0);(i < nAction);i += 1) {
   =============  ==============================================================

- до и после двоеточия в интервальной версии инструкции for

.. table::

   =============  ==============================================================
   ПРАВИЛЬНО      .. code-block:: c++

                     for (auto page : pages) {
                         page.close();
                     }
   -------------  --------------------------------------------------------------
   НЕПРАВИЛЬНО    .. code-block:: c++

                     for (auto page: pages) {
                         page.close();
                     }
   =============  ==============================================================


.. table::

   =============  ==============================================================
   ПРАВИЛЬНО      .. code-block:: c++

                     a = (b + c) * d;

                  .. code-block:: c++

                     while (bGo)

                  .. code-block:: c++

                     doSomething(a, b, c, d);

                  .. code-block:: c++

                     for (i = 0; (i < 10) && bGo; i += 1)

                  .. code-block:: c++

                     a = (c < d) ? (a - c) : (d - a);
   -------------  --------------------------------------------------------------
   НЕПРАВИЛЬНО    .. code-block:: c++

                     a=(b+c)*d;

                  .. code-block:: c++

                     while(bGo)

                  .. code-block:: c++

                     doSomething(a,b,c,d);

                  .. code-block:: c++

                     for(i=0;i<10 && bGo;i++)
   =============  ==============================================================

.. note::

   Перечисление всех ситуаций, когда необходимо ставить пробел, не является полным.


================================================================================
Прочее форматирование
================================================================================

--------------------------------------------------------------------------------
Размещайте не более одного оператора присваивания в строке.
--------------------------------------------------------------------------------

.. table::

   =============  ==============================================================
   ПРАВИЛЬНО      .. code-block:: c++

                     a = 0;
                     b = 0;
   -------------  --------------------------------------------------------------
   НЕПРАВИЛЬНО    .. code-block:: c++

                     a = b = 0;
   =============  ==============================================================

--------------------------------------------------------------------------------
Размещайте не более одной инструкции в одной строке (в строке не больше одной ';', кроме случая цикла for)
--------------------------------------------------------------------------------

.. table::

   =============  ==============================================================
   ПРАВИЛЬНО      .. code-block:: c++

                     int i(0);
                     findBorder(&i);
   -------------  --------------------------------------------------------------
   НЕПРАВИЛЬНО    .. code-block:: c++

                     int i(0); findBorder(&i);
   =============  ==============================================================

--------------------------------------------------------------------------------
Полагайтесь на приоритет только арифметических операторов. Используйте скобки для выделения частей выражений и указания приоритета вычислений.
--------------------------------------------------------------------------------

.. table::

   =============  ==============================================================
   ПРАВИЛЬНО      .. code-block:: c++

                     a = b & (c | e) & d;
   -------------  --------------------------------------------------------------
   НЕПРАВИЛЬНО    .. code-block:: c++

                     a = b & c | e & d;
   =============  ==============================================================

