================================================================================
Исходный код
================================================================================

--------------------------------------------------------------------------------
Имена файлов строчными латинскими символами без пробелов и знаков
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
Кодировка исходных файлов UTF-8
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
Запрещается использовать спецсимволы в исходных текстах
--------------------------------------------------------------------------------
.. attention:: Особое внимание обращать на вставку в исходный код символа табуляции. 

.. tip:: При необходимости произведите настройку вашей IDE на автоматическую замену табуляций соответствующим числом пробелов.

Количество пробелов, на которое заменяется табулятор при показе, является настройкой текстового редактора и может быть разным. Смешение в коде отступов с помощью нескольких пробелов и табуляций приводит к непредсказуемым визуальным нарушениям структуры отступов при просмотре.

Например, при показе табуляции в 2 пробела 

.. literalinclude:: tabexample.cpp
   :language: c++
   :tab-width: 2
   :linenos:

При показе табуляции в 3 пробела 

.. literalinclude:: tabexample.cpp
   :language: c++
   :tab-width: 3
   :linenos:

При показе табуляции в 4 пробела 

.. literalinclude:: tabexample.cpp
   :language: c++
   :tab-width: 4
   :linenos:

При показе табуляции в 8 пробелов 

.. literalinclude:: tabexample.cpp
   :language: c++
   :tab-width: 8
   :linenos:


--------------------------------------------------------------------------------
Избегайте длинных файлов.
--------------------------------------------------------------------------------
Длинными считаются файлы более 1000 строк.


--------------------------------------------------------------------------------
Избегайте длинных функций.
--------------------------------------------------------------------------------
Длинными считаются функции более 180 строк.


--------------------------------------------------------------------------------
Длина строки исходного файла ограничена 80 символами
--------------------------------------------------------------------------------
Используйте разрывы строк для более длинных строк.

Основание: реализация ограничения на длину строки происходит либо отбрасывание, либо переносом конца, при этом исходный текст становится трудным для восприятия. Отсутствие ограничения на длину строки у других разработчиков гарантировать невозможно. 80 является общепризнанным соглашением о количестве символов в строке редакторов, эмуляторов терминалов (консолей), принтеров и отладчиков.


================================================================================
Отступы, выравнивания и скобки
================================================================================

.. tip:: Настройте ваш редактор на автоматическое поддержание правильного форматирования.

--------------------------------------------------------------------------------
Основной отступ составляет 4 пробела
--------------------------------------------------------------------------------

Тело составного блока размещайте с основным отступом относительно границ блока.

.. hint::

   .. code-block:: c++
   
      for (i = 0; i < nElements; i += 1) {
          a[i] = 0;
      }

.. error::

   .. code-block:: c++
   
      for (i = 0; i < nElements; i += 1) {
        a[i] = 0;
      }

Исключение составляют пространства имен, для которых отступ внутри блока не делается.

.. hint::

   .. code-block:: c++

       // 
       
       namespace common {
       class X {
           // ...
       };

       namespace nestedNameSpace {
       class Y{
           // ...
       };

       } // namespace nestedNameSpace
       } // common

.. error::

   .. code-block:: c++

      namespace comon {
          class X {
              // ...
          };

          namespace nestedNameSpace {
              class Y{
                  // ...
              };
          } // namespace nestedNameSpace
      } // common

--------------------------------------------------------------------------------
Определение функции
--------------------------------------------------------------------------------

Тело определения функции начинайте с новой строки и завершайте на новой строке.

.. hint::

   .. code-block:: c++

      int main(int argc, char* argv[])
      {
      }

.. error::

   .. code-block:: c++

      int main(int argc, char* argv[]) {
      }


--------------------------------------------------------------------------------
Оформление инструкции цикла for
--------------------------------------------------------------------------------

Цикл for оформляется в соответствии с общим принципом оформления блоков следующим образом.

.. code-block:: c++

   for ("initialization"; "condition"; "update") {
       "statements";
   }

.. hint::

   .. code-block:: c++

      for (ptrdiff_t iPage(0); iPage < nPage; iPage += 1) {
          // ...
      }

.. hint::

   .. code-block:: c++

      for (auto v : range) {
          summ += v;
      }

.. error::

   .. code-block:: c++

      for (ptrdiff_t iPage(0); iPage < nPage; iPage += 1)
      {
          // ...
      }

.. error::

   .. code-block:: c++

      for (auto v : range) 
      {
          summ += v;
      }

.. error::

   .. code-block:: c++

      for (auto v : range) { summ += v; }

Пустое и однострочное тело цикла оформляется по общему шаблону и обрамляется скобками.

.. hint::

   .. code-block:: c++

      for (auto v : range) {
      }

.. error::

   .. code-block:: c++

      for (ptrdiff_t iPage(0); iPage < nPage; iPage += 1);

--------------------------------------------------------------------------------
Оформление инструкции цикла while
--------------------------------------------------------------------------------

Цикл while оформлятеся в соответствии с общим принципом оформления блоков следующим образом.

.. code-block:: c++

   while ("condition") {
       "statements";
   }

.. hint:: 

   .. code-block:: c++

      while (shouldRead) {
          // ...
      }

.. error:: 

   .. code-block:: c++

      while (shouldRead) 
      {
          // ...
      }

Пустое и однострочное тело цикла оформляется по общему шаблону и обрамляется скобками.

.. hint:: 

   .. code-block:: c++

      while (shouldRead) {
          read();
      }

.. error:: 

   .. code-block:: c++

      while (shouldRead);

.. error:: 

   .. code-block:: c++

      while (shouldRead)
          ;

--------------------------------------------------------------------------------
Оформление инструкции цикла do-while
--------------------------------------------------------------------------------

Цикл do - while оформлятеся в соответствии с общим принципом оформления блоков следующим образом.

.. attention:: Использовать цикл do-while не рекомендуется.

.. code-block:: c++

   do {
       "statements";
   } while ("condition");


.. hint::

   .. code-block:: c++

      do {
          up();
          go()
      } while (inside);

Однострочное тело цикла оформляется по общему шаблону и обрамляется скобками.

.. hint::

   .. code-block:: c++

      do {
          move();
      } while (inside);

--------------------------------------------------------------------------------
Инструкция выбора switch оформляется следующим образом.
--------------------------------------------------------------------------------

.. hint:: ШАБЛОН оформления switch

   .. code-block:: c++

      switch ("condition") {
      case DEF:
          "statements";
          break;
      case XYZ:
          "statements";
          break;
      default:
          "statements";
      }
      

.. include:: formatting-splitting.rst

.. include:: formatting-spaces.rst

.. include:: formatting-other.rst